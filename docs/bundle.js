(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
class Bullet {
    constructor(center, velocity) {
        this.size = { x: 3, y: 3 };
        this.center = center;
        this.velocity = velocity;
    }
    update() {
        this.center.x += this.velocity.x;
        this.center.y += this.velocity.y;
    }
}
exports.Bullet = Bullet;

},{}],2:[function(require,module,exports){
"use strict";
const util_1 = require("./util");
const player_1 = require("./player");
const invader_1 = require("./invader");
class Game {
    constructor(domId) {
        this.domId = domId;
        this.canvas = document.getElementById(domId);
        this.canvas.onclick = this.reset.bind(this);
        this.gameSize = { x: this.canvas.width, y: this.canvas.height };
        this.screen = this.canvas.getContext('2d');
        this.reset();
    }
    reset() {
        this.bodies = util_1.Util.produceInvaders(this);
        this.bodies.push(new player_1.Player(this));
        this.tick();
    }
    addBody(body) {
        this.bodies.push(body);
    }
    tick() {
        if (!this.hasPlayer()) {
            this.loseGame();
            return;
        }
        if (!this.hasInvaders()) {
            this.winGame();
            return;
        }
        this.update();
        this.draw();
        requestAnimationFrame(this.tick.bind(this));
    }
    draw() {
        this.screen.clearRect(0, 0, this.gameSize.x, this.gameSize.y);
        for (let i = 0; i < this.bodies.length; i++) {
            util_1.Util.drawRect(this.screen, this.bodies[i]);
        }
    }
    invadersBelow(invader) {
        return this.bodies.filter((body) => {
            return body instanceof invader_1.Invader &&
                body.center.y > invader.center.y &&
                body.center.x - invader.center.x < invader.size.x;
        });
    }
    update() {
        let bodies = this.bodies;
        const notCollidingWithAnything = (b1) => {
            return bodies.filter((b2) => {
                return util_1.Util.colliding(b1, b2);
            }).length === 0;
        };
        this.bodies = this.bodies.filter(notCollidingWithAnything);
        for (let i = 0; i < this.bodies.length; i++) {
            this.bodies[i].update();
        }
    }
    hasPlayer() {
        return this.bodies.filter((body) => {
            return body instanceof player_1.Player;
        }).length === 1;
    }
    hasInvaders() {
        return this.bodies.filter((body) => {
            return body instanceof invader_1.Invader;
        }).length > 0;
    }
    loseGame() {
        this.screen.font = "48px serif";
        this.screen.textAlign = "center";
        this.screen.fillText("Game Over", this.gameSize.x / 2, this.gameSize.y / 2);
    }
    winGame() {
        this.screen.font = "48px serif";
        this.screen.textAlign = "center";
        this.screen.fillText("You Win!", this.gameSize.x / 2, this.gameSize.y / 2);
    }
}
exports.Game = Game;

},{"./invader":3,"./player":6,"./util":7}],3:[function(require,module,exports){
"use strict";
const bullet_1 = require("./bullet");
class Invader {
    constructor(game, center) {
        this.size = { x: 15, y: 15 };
        this.game = game;
        this.center = center;
        this.patrolX = 0;
        this.speedX = 0.3;
    }
    update() {
        if (this.patrolX < 0 || this.patrolX > 40) {
            this.speedX = -this.speedX;
        }
        this.center.x += this.speedX;
        this.patrolX += this.speedX;
        if (Math.random() > 0.99 && !this.game.invadersBelow(this).length) {
            let bullet = new bullet_1.Bullet({ x: this.center.x, y: this.center.y + this.size.x / 2 }, { x: Math.random() - 0.5, y: 2 });
            this.game.addBody(bullet);
        }
    }
}
exports.Invader = Invader;

},{"./bullet":1}],4:[function(require,module,exports){
"use strict";
exports.KEYS = {
    LEFT: 37,
    RIGHT: 39,
    SPACE: 32
};
class Keyboarder {
    constructor() {
        this.keyState = {};
        window.onkeydown = (event) => {
            this.keyState[event.keyCode] = true;
        };
        window.onkeyup = (event) => {
            this.keyState[event.keyCode] = false;
        };
    }
    isDown(keyCode) {
        return this.keyState[keyCode] === true;
    }
}
exports.Keyboarder = Keyboarder;

},{}],5:[function(require,module,exports){
"use strict";
const game_1 = require("./game");
window.onload = function () {
    new game_1.Game('screen');
};

},{"./game":2}],6:[function(require,module,exports){
"use strict";
const bullet_1 = require("./bullet");
const keyboarder_1 = require("./keyboarder");
class Player {
    constructor(game) {
        this.size = { x: 15, y: 15 };
        this.game = game;
        this.keyboarder = new keyboarder_1.Keyboarder();
        this.center = { x: this.game.gameSize.x / 2, y: this.game.gameSize.y - this.size.x };
    }
    update() {
        if (this.keyboarder.isDown(keyboarder_1.KEYS.LEFT)) {
            this.center.x -= 2;
        }
        else if (this.keyboarder.isDown(keyboarder_1.KEYS.RIGHT)) {
            this.center.x += 2;
        }
        else if (this.keyboarder.isDown(keyboarder_1.KEYS.SPACE)) {
            let bullet = new bullet_1.Bullet({ x: this.center.x, y: this.center.y - this.size.x / 2 }, { x: 0, y: -6 });
            this.game.addBody(bullet);
        }
    }
}
exports.Player = Player;

},{"./bullet":1,"./keyboarder":4}],7:[function(require,module,exports){
"use strict";
const invader_1 = require("./invader");
var Util;
(function (Util) {
    function produceInvaders(game) {
        let invaders = [];
        for (let i = 0; i < 24; i++) {
            let x = 30 + (i % 8) * 30;
            let y = 30 + (i % 3) * 30;
            invaders.push(new invader_1.Invader(game, { x: x, y: y }));
        }
        return invaders;
    }
    Util.produceInvaders = produceInvaders;
    ;
    function colliding(b1, b2) {
        return !(b1 === b2 ||
            b1.center.x + b1.size.x / 2 < b2.center.x + b2.size.x / 2 ||
            b1.center.y + b1.size.y / 2 < b2.center.y + b2.size.y / 2 ||
            b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 ||
            b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2);
    }
    Util.colliding = colliding;
    function drawRect(screen, body) {
        screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);
    }
    Util.drawRect = drawRect;
    ;
})(Util = exports.Util || (exports.Util = {}));

},{"./invader":3}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
