(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bullet = void 0;
const global_1 = require("./global");
class Bullet extends global_1.Body {
    constructor(center, velocity) {
        super();
        this.size = { x: 3, y: 3 };
        this.center = center;
        this.velocity = velocity;
    }
    update() {
        this.center.x += this.velocity.x;
        this.center.y += this.velocity.y;
    }
}
exports.Bullet = Bullet;

},{"./global":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
const util_1 = require("./util");
const player_1 = require("./player");
const invader_1 = require("./invader");
const keys_1 = require("./keys");
class Game {
    constructor(domId) {
        this.canvas = document.getElementById(domId);
        this.canvas.onclick = this.reset.bind(this);
        this.gameSize = { x: this.canvas.width, y: this.canvas.height };
        this.screen = this.canvas.getContext("2d");
        window.addEventListener("keyup", event => {
            if (event.keyCode === keys_1.KEYS.R) {
                this.reset();
            }
        });
    }
    addBody(body) {
        this.bodies.push(body);
    }
    tick() {
        if (!this.hasPlayer()) {
            this.loseGame();
            return;
        }
        if (!this.hasInvaders()) {
            this.winGame();
            return;
        }
        this.update();
        this.draw();
        requestAnimationFrame(this.tick.bind(this));
    }
    invadersBelow(invader) {
        return this.bodies.filter((body) => {
            return (body instanceof invader_1.Invader &&
                body.center.y > invader.center.y &&
                body.center.x - invader.center.x < invader.size.x);
        });
    }
    start() {
        this.reset();
    }
    reset() {
        this.bodies = util_1.Util.produceInvaders(this);
        this.bodies.push(new player_1.Player(this));
        this.tick();
    }
    draw() {
        this.screen.clearRect(0, 0, this.gameSize.x, this.gameSize.y);
        for (let i = 0; i < this.bodies.length; i++) {
            util_1.Util.drawRect(this.screen, this.bodies[i]);
        }
    }
    update() {
        let bodies = this.bodies;
        const notCollidingWithAnything = (b1) => {
            return (bodies.filter((b2) => {
                return util_1.Util.colliding(b1, b2);
            }).length === 0);
        };
        this.bodies = this.bodies.filter(notCollidingWithAnything);
        for (let i = 0; i < this.bodies.length; i++) {
            this.bodies[i].update();
        }
    }
    hasPlayer() {
        return (this.bodies.filter((body) => {
            return body instanceof player_1.Player;
        }).length === 1);
    }
    hasInvaders() {
        return (this.bodies.filter((body) => {
            return body instanceof invader_1.Invader;
        }).length > 0);
    }
    loseGame() {
        this.displayMessage("Game Over");
    }
    winGame() {
        this.displayMessage("You win!");
    }
    displayMessage(text) {
        this.screen.font = "48px serif";
        this.screen.textAlign = "center";
        this.screen.fillText(text, this.gameSize.x / 2, this.gameSize.y / 2);
    }
}
exports.Game = Game;

},{"./invader":4,"./keys":6,"./player":8,"./util":9}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Body = exports.Center = exports.Size = exports.Velocity = void 0;
class Velocity {
}
exports.Velocity = Velocity;
class Size {
}
exports.Size = Size;
class Center {
}
exports.Center = Center;
class Body {
}
exports.Body = Body;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invader = void 0;
const bullet_1 = require("./bullet");
const global_1 = require("./global");
class Invader extends global_1.Body {
    constructor(game, center) {
        super();
        this.size = { x: 15, y: 15 };
        this.bulletChance = 0.99;
        this.game = game;
        this.center = center;
        this.patrolX = 0;
        this.speedX = 0.3;
    }
    update() {
        if (this.patrolX < 0 || this.patrolX > 40) {
            this.speedX = -this.speedX;
        }
        this.center.x += this.speedX;
        this.patrolX += this.speedX;
        if (Math.random() > this.bulletChance &&
            !this.game.invadersBelow(this).length) {
            let bullet = new bullet_1.Bullet({ x: this.center.x, y: this.center.y + this.size.x / 2 }, { x: Math.random() - 0.5, y: 2 });
            this.game.addBody(bullet);
        }
    }
}
exports.Invader = Invader;

},{"./bullet":1,"./global":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keyboarder = void 0;
class Keyboarder {
    constructor() {
        this.keyState = [];
        window.addEventListener("keydown", event => {
            this.keyState[event.keyCode] = true;
        });
        window.addEventListener("keyup", event => {
            this.keyState[event.keyCode] = false;
        });
    }
    isDown(keyCode) {
        return this.keyState[keyCode] === true;
    }
}
exports.Keyboarder = Keyboarder;

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEYS = void 0;
exports.KEYS = {
    LEFT: 37,
    R: 82,
    RIGHT: 39,
    SPACE: 32
};

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("./game");
window.onload = function () {
    const game = new game_1.Game("screen");
    game.start();
};

},{"./game":2}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const bullet_1 = require("./bullet");
const keyboarder_1 = require("./keyboarder");
const keys_1 = require("./keys");
const global_1 = require("./global");
class Player extends global_1.Body {
    constructor(game) {
        super();
        this.size = { x: 15, y: 15 };
        this.lastShot = 0;
        this.shotLag = 100;
        this.game = game;
        this.keyboarder = new keyboarder_1.Keyboarder();
        this.center = {
            x: this.game.gameSize.x / 2,
            y: this.game.gameSize.y - this.size.x
        };
    }
    update() {
        if (this.keyboarder.isDown(keys_1.KEYS.LEFT) &&
            this.center.x - this.size.x / 2 > 0) {
            this.center.x -= 2;
        }
        else if (this.keyboarder.isDown(keys_1.KEYS.RIGHT) &&
            this.center.x + this.size.x / 2 < this.game.gameSize.x) {
            this.center.x += 2;
        }
        if (this.keyboarder.isDown(keys_1.KEYS.SPACE)) {
            const now = new Date().getTime();
            if (now - this.lastShot < this.shotLag)
                return;
            this.lastShot = new Date().getTime();
            let bullet = new bullet_1.Bullet({ x: this.center.x, y: this.center.y - this.size.x / 2 }, { x: 0, y: -6 });
            this.game.addBody(bullet);
        }
    }
}
exports.Player = Player;

},{"./bullet":1,"./global":3,"./keyboarder":5,"./keys":6}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = void 0;
const invader_1 = require("./invader");
class Util {
    static produceInvaders(game) {
        let invaders = [];
        for (let i = 0; i < 24; i++) {
            let x = 30 + (i % 8) * 30;
            let y = 30 + (i % 3) * 30;
            invaders.push(new invader_1.Invader(game, { x: x, y: y }));
        }
        return invaders;
    }
    static colliding(b1, b2) {
        return !(b1 === b2 ||
            b1.center.x + b1.size.x / 2 < b2.center.x + b2.size.x / 2 ||
            b1.center.y + b1.size.y / 2 < b2.center.y + b2.size.y / 2 ||
            b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 ||
            b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2);
    }
    static drawRect(screen, body) {
        screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2, body.size.x, body.size.y);
    }
}
exports.Util = Util;

},{"./invader":4}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
